{"version":3,"sources":["views/App.module.scss","config/env.ts","components/header/Header.tsx","components/cards.tsx","config/features.ts","services/common.ts","services/jwt.ts","services/transformers/gpconnect.ts","services/transformers/migrator.ts","services/mock/appointments.ts","services/superfetch.ts","services/book-appointments.ts","views/book-appointments.tsx","services/find-appointments.ts","views/find-appointments.tsx","views/content.tsx","views/App.tsx","config/serviceWorker.js","index.tsx"],"names":["module","exports","publicPath","Header","className","role","data-testid","to","aria-label","xmlns","focusable","viewBox","fill","d","alt","src","href","items","icon","success","map","item","practitioner","location","start","end","description","patientId","schedule","aria-hidden","stroke-width","stroke-linecap","toString","renderTickOrCross","buildCards","domainOptions","features","api","commonHeaders","domain","buildRequest","currentTime","Date","expiryTime","getTime","jwtCreationTime","Math","round","payload","encodedPayload","base64url","JSON","stringify","gpconnectTransformer","entry","appointment","resource","sort","a","b","Number","id","minutesDuration","slot","participant","actor","reference","migratorTransformer","rest","toLocaleString","split","mockFindAppointments","mockBookAppointments","superfetch","async","url","headers","method","body","fetch","catch","error","console","log","response","json","bookAppointments","bookAppointmentsGPConnect","bookAppointmentsMigrator","slotId","locationId","interactionId","useState","appointmentsSuccess","setAppointmentsSuccess","appointmentsFail","setAppointmentsFail","useEffect","filter","fail","getSlotService","length","findAppointments","findAppointmentsGPConnect","findAppointmentsMigrator","appointments","setAppointments","exact","path","App","featuresToSet","parse","window","search","parseBooleans","Object","entries","forEach","key","value","styles","content","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.168dcb9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"App_content__3geu6\"};","export const publicPath = 'gpconnect-demonstrator';\nexport const gpconnect = 'http://localhost:9000';\nexport const mock = '/';\nexport const endpoints = {\n    appointments: 'patients',\n    patient: 'patientinfo'\n};\nexport const domains = {\n    gpconnect: {\n        domain: 'http://localhost:9000',\n        findAppointments: ''\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { publicPath } from '../../config/env';\n\nconst Header = () => {\n  return (\n    <header className=\"nhsuk-header nhsuk-header--transactional\" role=\"banner\" data-testid=\"header\">\n      <div className=\"nhsuk-width-container nhsuk-header__container\">\n        <div className=\"nhsuk-header__logo\">\n          <Link className=\"nhsuk-header__link\" to={`/${publicPath}`} aria-label=\"NHS homepage\">\n            <svg className=\"nhsuk-logo nhsuk-logo--white\" xmlns=\"http://www.w3.org/2000/svg\"\n              focusable=\"false\" viewBox=\"0 0 40 16\">\n              <path fill=\"#fff\" d=\"M0 0h40v16H0z\" />\n              <path fill=\"#005eb8\"\n                d=\"M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6\" />\n              <img alt=\"nhs-logo\" src=\"https://assets.nhs.uk/images/nhs-logo.png\" />\n            </svg>\n          </Link>\n        </div>\n        <div className=\"nhsuk-header__transactional-service-name\">\n          <a className=\"nhsuk-header__transactional-service-name--link\" href=\"/\">Appointments Migrator</a>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nexport default ({ items, icon = false, success = true }) => {\n\n    const renderTickOrCross = (success) => {\n        const tick = <svg className=\"right nhsuk-icon nhsuk-icon__tick\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" aria-hidden=\"true\">\n            <path stroke-width=\"4\" stroke-linecap=\"round\" d=\"M18.4 7.8l-8.5 8.4L5.6 12\"></path>\n        </svg>;\n\n        const cross = <svg className=\"right nhsuk-icon nhsuk-icon__cross\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n            <path d=\"M17 18.5c-.4 0-.8-.1-1.1-.4l-10-10c-.6-.6-.6-1.6 0-2.1.6-.6 1.5-.6 2.1 0l10 10c.6.6.6 1.5 0 2.1-.3.3-.6.4-1 .4z\"></path>\n            <path d=\"M7 18.5c-.4 0-.8-.1-1.1-.4-.6-.6-.6-1.5 0-2.1l10-10c.6-.6 1.5-.6 2.1 0 .6.6.6 1.5 0 2.1l-10 10c-.3.3-.6.4-1 .4z\"></path>\n        </svg>;\n\n        const icon = {\n            'true': tick,\n            'false': cross,\n        }[success.toString()];\n\n        return icon;\n\n    }\n\n    const buildCards = (items) => {\n        return items.map(item => {\n            const { practitioner, location, start, end, description, patientId, schedule } = item;\n            return (\n                <li className=\"mb4\">\n                    <div>\n                        <hr></hr>\n                        {icon && renderTickOrCross(success)}\n                        <h4>\n                            {patientId}\n                        </h4>\n                        <ul>\n                            <li>{start} ➡ {end}</li>\n                            <li>{practitioner}</li>\n                            <li>{location}</li>\n                            <li>{schedule}</li>\n                        </ul>\n                        <div>{description}</div>\n                    </div>\n                </li>\n            )\n        });\n    };\n\n    return (\n        <ul className=\"list-reset\">\n            <div className=\"mb4\">\n                {buildCards(items)}\n            </div>\n        </ul>\n    );\n};\n","\nexport const domainOptions = {\n    gpconnect: 'gpconnect',\n    migrator: 'migrator',\n    none: 'none'\n};\n\nconst features = {\n    api: domainOptions.none\n};\n\nexport const setFeatures = (featuresToSet: { [s: string]: unknown; } | ArrayLike<unknown>) => {\n    Object.entries(featuresToSet).forEach(([key, value]) => {\n        features[key] = value;\n    });\n};\n\nexport const api = () => {\n    return features.api;\n};","export const commonHeaders = {\n    'accept': 'application/fhir+json',\n    'Ssp-TraceID': '09a01679-2564-0fb4-5129-aecc81ea2706',\n    'Ssp-From': 200000000359,\n    'Ssp-To': 918999198993,\n    'Ssp-InteractionID': 'urn:nhs:names:services:gpconnect:fhir:rest:search:slot-1',\n};\n\nexport const domain = 'http://localhost:9000/gpconnect-demonstrator/v1/fhir';","import base64url from 'base64url';\n\nexport const buildRequest = () => {\n    // Construct the JWT token for the request\n    const currentTime = new Date();\n    const expiryTime = new Date(currentTime.getTime() + 300000); // 5 mins after current time\n    const jwtCreationTime = Math.round(currentTime.getTime() / 1000);\n    const jwtExpiryTime = Math.round(expiryTime.getTime() / 1000);\n    const targetURI = \"providerURL_1_x_x\";\n    const requesting_organization_ODS_Code = \"requesting_organization_ODS_Code\";\n\n    const payload = {\n        \"iss\": \"http://gpconnect-postman-url\",\n        \"sub\": \"1\",\n        \"aud\": targetURI,\n        \"exp\": jwtExpiryTime,\n        \"iat\": jwtCreationTime,\n        \"reason_for_request\": \"directcare\",\n        \"requested_scope\": \"patient/*.read\",\n        \"requesting_device\": {\n            \"resourceType\": \"Device\",\n            \"id\": \"1\",\n            \"identifier\": [\n                {\n                    \"system\": \"Web Interface\",\n                    \"value\": \"Postman example consumer\"\n                }\n            ],\n            \"model\": \"Postman\",\n            \"version\": \"1.0\"\n        },\n        \"requesting_organization\": {\n            \"resourceType\": \"Organization\",\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                    \"value\": requesting_organization_ODS_Code\n                }\n            ],\n            \"name\": \"Postman Organization\"\n        },\n        \"requesting_practitioner\": {\n            \"resourceType\": \"Practitioner\",\n            \"id\": \"1\",\n            \"identifier\": [\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/sds-user-id\",\n                    \"value\": \"G13579135\"\n                },\n                {\n                    \"system\": \"https://fhir.nhs.uk/Id/sds-role-profile-id\",\n                    \"value\": \"111111111\"\n                },\n            ],\n            \"name\": [{\n                \"family\": \"Demonstrator\",\n                \"given\": [\n                    \"GPConnect\"\n                ],\n                \"prefix\": [\n                    \"Mr\"\n                ]\n            }]\n        }\n    };\n\n    // Encode the JWT data into the base64url encoded string\n    const encodedPayload = base64url(JSON.stringify(payload));\n    return `eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.${encodedPayload}.`;\n};\n","export const gpconnectTransformer = (payload) => {\n    const { entry: appointments } = payload;\n    const lift = appointments\n        .map(appointment => appointment.resource)\n        .sort((a, b) => Number(a.id) - Number(b.id));\n\n    const flatten = lift.map(({ id, description, start, end, minutesDuration, slot, participant }) => {\n        return [\n            [participant[0].actor.reference],\n            [slot[0].reference],\n            [participant[1].actor.reference],\n            [participant[2].actor.reference],\n            [start, 'start'],\n            [end, 'end'],\n            [minutesDuration, 'duration'],\n            [description, 'description']\n        ];\n    })\n    return flatten;\n};\n","export const migratorTransformer = (payload) => {\n    return payload.map(({ start, end, ...rest }) => {\n        return {\n            start: new Date(start).toLocaleString(),\n            end: new Date(end).toLocaleString().split(',')[1],\n            ...rest\n        };\n\n    });\n};\n\nexport const splitSuccessFail = (items) => {\n    const success = items.filter(item => item.success);\n    const fail = items.filter(item => !item.success);\n    return { success, fail };\n};","export const mockFindAppointments =  [\n    {\n        description: 'A appointment to discuss test data.',\n        start: '2020-02-13T09:00:00+00:00',\n        end: '2020-02-13T09:10:00+00:00',\n        minutesDuration: 10,\n        schedule: 'Schedule 12 for phone appointments with staff nurse',\n        patientId: 'Laura Barry',\n        location: 'The Hepworth Surgery',\n        practitioner: 'Nichole Gilbert (G13579135)'\n    },\n    {\n        description: 'A follow-up appointment for tests.',\n        start: '2020-02-13T09:00:00+00:00',\n        end: '2020-02-13T09:10:00+00:00',\n        minutesDuration: 10,\n        schedule: 'Schedule 9 for general appointments',\n        patientId: 'Les Fawcett',\n        location: 'The Hockey Surgery Annex',\n        practitioner: 'Dr Melissa Parsons (G11111116)'\n    },\n    {\n        description: 'A appointment to discuss test data.',\n        start: '2020-02-13T09:00:00+00:00',\n        end: '2020-02-13T09:10:00+00:00',\n        minutesDuration: 10,\n        schedule: 'Schedule 12 for phone appointments with staff nurse',\n        patientId: 'Emily Margo',\n        location: 'The Hepworth Surgery',\n        practitioner: 'Nichole Gilbert (G13579135)'\n    },\n    {\n        description: 'A follow-up appointment for tests.',\n        start: '2020-02-13T09:00:00+00:00',\n        end: '2020-02-13T09:10:00+00:00',\n        minutesDuration: 10,\n        schedule: 'Schedule 9 for general appointments',\n        patientId: 'Parth Aggarwal',\n        location: 'The Hockey Surgery Annex',\n        practitioner: 'Dr Melissa Parsons (G11111116)'\n    },\n    {\n        description: 'A appointment to discuss test data.',\n        start: '2020-02-13T09:00:00+00:00',\n        end: '2020-02-13T09:10:00+00:00',\n        minutesDuration: 10,\n        schedule: 'Schedule 12 for phone appointments with staff nurse',\n        patientId: 'Natasha Desai',\n        location: 'The Hepworth Surgery',\n        practitioner: 'Nichole Gilbert (G13579135)'\n    },\n    {\n        description: 'A follow-up appointment for tests.',\n        start: '2020-02-13T09:00:00+00:00',\n        end: '2020-02-13T09:10:00+00:00',\n        minutesDuration: 10,\n        schedule: 'Schedule 9 for general appointments',\n        patientId: 'Tina Coxhead',\n        location: 'The Hockey Surgery Annex',\n        practitioner: 'Dr Melissa Parsons (G11111116)'\n    }\n];\n\nexport const mockBookAppointments = [\n    {\n        \"success\": false,\n        \"errorMessage\": \"\",\n        \"description\": \"A appointment to discuss test data.\",\n        \"start\": \"2020-02-13T09:00:00+00:00\",\n        \"end\": \"2020-02-13T09:10:00+00:00\",\n        \"minutesDuration\": 10,\n        \"schedule\": \"Schedule 12 for phone appointments with staff nurse\",\n        \"patientId\": \"Laura Barry\",\n        \"location\": \"The Hepworth Surgery\",\n        \"practitioner\": \"Nichole Gilbert (G13579135)\"\n    },\n    {\n        \"success\": false,\n        \"errorMessage\": \"\",\n        \"description\": \"A follow-up appointment for tests.\",\n        \"start\": \"2020-02-13T09:00:00+00:00\",\n        \"end\": \"2020-02-13T09:10:00+00:00\",\n        \"minutesDuration\": 10,\n        \"schedule\": \"Schedule 9 for general appointments\",\n        \"patientId\": \"Les Fawcett\",\n        \"location\": \"The Hockey Surgery Annex\",\n        \"practitioner\": \"Dr Melissa Parsons (G11111116)\"\n    },\n    {\n        \"success\": true,\n        \"errorMessage\": \"\",\n        \"description\": \"A appointment to discuss test data.\",\n        \"start\": \"2020-02-13T09:00:00+00:00\",\n        \"end\": \"2020-02-13T09:10:00+00:00\",\n        \"minutesDuration\": 10,\n        \"schedule\": \"Schedule 12 for phone appointments with staff nurse\",\n        \"patientId\": \"Emily Margo\",\n        \"location\": \"The Hepworth Surgery\",\n        \"practitioner\": \"Nichole Gilbert (G13579135)\"\n    },\n    {\n        \"success\": true,\n        \"errorMessage\": \"\",\n        \"description\": \"A follow-up appointment for tests.\",\n        \"start\": \"2020-02-13T09:00:00+00:00\",\n        \"end\": \"2020-02-13T09:10:00+00:00\",\n        \"minutesDuration\": 10,\n        \"schedule\": \"Schedule 9 for general appointments\",\n        \"patientId\": \"Parth Aggarwal\",\n        \"location\": \"The Hockey Surgery Annex\",\n        \"practitioner\": \"Dr Melissa Parsons (G11111116)\"\n    },\n    {\n        \"success\": true,\n        \"errorMessage\": \"\",\n        \"description\": \"A appointment to discuss test data.\",\n        \"start\": \"2020-02-13T09:00:00+00:00\",\n        \"end\": \"2020-02-13T09:10:00+00:00\",\n        \"minutesDuration\": 10,\n        \"schedule\": \"Schedule 12 for phone appointments with staff nurse\",\n        \"patientId\": \"Natasha Desai\",\n        \"location\": \"The Hepworth Surgery\",\n        \"practitioner\": \"Nichole Gilbert (G13579135)\"\n    },\n    {\n        \"success\": true,\n        \"errorMessage\": \"\",\n        \"description\": \"A follow-up appointment for tests.\",\n        \"start\": \"2020-02-13T09:00:00+00:00\",\n        \"end\": \"2020-02-13T09:10:00+00:00\",\n        \"minutesDuration\": 10,\n        \"schedule\": \"Schedule 9 for general appointments\",\n        \"patientId\": \"Tina Coxhead\",\n        \"location\": \"The Hockey Surgery Annex\",\n        \"practitioner\": \"Dr Melissa Parsons (G11111116)\"\n    }\n];","interface parameters {\n    url: string;\n    headers?: {};\n    method: string;\n    body?: string;\n}\n\nexport const superfetch = async ({ url, headers = {}, method = 'GET', body = '' }: parameters) => {\n    const response = await fetch(url, {\n        headers,\n        method,\n        body\n    }).catch((error) => {\n        console.log('error', error);\n    });\n\n    if (response) {\n        return await response.json();\n    }\n    return [];\n};\n","import { api, domainOptions } from '../config/features';\nimport { commonHeaders, domain } from './common';\nimport { buildRequest } from './jwt';\nimport { gpconnectTransformer } from './transformers/gpconnect';\nimport { migratorTransformer } from './transformers/migrator';\nimport { mockBookAppointments } from './mock/appointments';\nimport { superfetch } from './superfetch';\n\nexport const bookAppointments = async () => {\n    const map = {\n        [domainOptions.gpconnect]: bookAppointmentsGPConnect,\n        [domainOptions.none]: bookAppointmentsMigrator\n    };\n    return await map[api()]();\n};\n\nexport const bookAppointmentsGPConnect = async ({\n    start,\n    end,\n    slotId,\n    patientId,\n    locationId\n} = {\n        start: '2020-02-13T09:40:00+00:00',\n        end: '2020-02-13T09:50:00+00:00',\n        slotId: '115',\n        patientId: '2',\n        locationId: '17'\n    }) => {\n\n    const body = JSON.stringify({\n        \"resourceType\": \"Appointment\",\n        \"meta\": {\n            \"profile\": [\n                \"https://fhir.nhs.uk/STU3/StructureDefinition/GPConnect-Appointment-1\"\n            ]\n        },\n        \"contained\": [\n            {\n                \"resourceType\": \"Organization\",\n                \"id\": \"1\",\n                \"meta\": {\n                    \"profile\": [\n                        \"https://fhir.nhs.uk/STU3/StructureDefinition/CareConnect-GPC-Organization-1\"\n                    ]\n                },\n                \"identifier\": [\n                    {\n                        \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\n                        \"value\": \"GPC001\"\n                    }\n                ],\n                \"name\": \"GP Connect Demonstrator\",\n                \"telecom\": [\n                    {\n                        \"system\": \"phone\",\n                        \"value\": \"0113 258 2569\"\n                    }\n                ]\n            }\n        ],\n        \"status\": \"booked\",\n        \"created\": \"2020-02-11T09:40:00+00:00\",\n        \"description\": \"A test appointment booked from Appointments Portal 📓\",\n        \"start\": start,\n        \"end\": end,\n        \"slot\": [\n            {\n                \"reference\": `Slot/${slotId}`\n            }\n        ],\n        \"participant\": [\n            {\n                \"actor\": {\n                    \"reference\": `Patient/${patientId}`\n                },\n                \"status\": \"accepted\"\n            },\n            {\n                \"actor\": {\n                    \"reference\": `Location/${locationId}`\n                },\n                \"status\": \"accepted\"\n            }\n        ],\n        \"extension\": [\n            {\n                \"url\": \"https://fhir.nhs.uk/STU3/StructureDefinition/Extension-GPConnect-BookingOrganisation-1\",\n                \"valueReference\": {\n                    \"reference\": \"#1\"\n                }\n            }\n        ]\n    });\n\n    const interactionId = 'urn:nhs:names:services:gpconnect:fhir:rest:create:appointment-1';\n\n    const headers = {\n        ...commonHeaders,\n        'Ssp-InteractionID': interactionId,\n        'Authorization': `Bearer ${buildRequest()}`\n    };\n\n    const url = `${domain}/Appointment`;\n\n    const response = await superfetch({ url, body, headers, method: 'POST' });\n    return gpconnectTransformer(response);\n};\n\nexport const bookAppointmentsMigrator = () => {\n    return migratorTransformer(mockBookAppointments);\n};","import React, { useEffect, useState } from 'react';\nimport Cards from '../components/cards';\nimport { bookAppointments } from '../services/book-appointments';\n\nexport default () => {\n    const [appointmentsSuccess, setAppointmentsSuccess] = useState([]);\n    const [appointmentsFail, setAppointmentsFail] = useState([]);\n\n    const getSlotService = async () => {\n        const response = await bookAppointments();\n        const success = response.filter(item => item.success);\n        const fail = response.filter(item => !item.success);\n        \n        setAppointmentsSuccess(success);\n        setAppointmentsFail(fail);\n    };\n\n    useEffect(() => {\n        getSlotService();\n    }, []);\n\n    return (\n        <div className=\"mb4\">\n            <h2 className=\"mb2\">Failed transfers</h2>\n            <div className=\"mb2\">{appointmentsFail.length} transfers failed.</div>\n            <Cards items={ appointmentsFail } icon={ true } success={false} />\n            <h2 className=\"mb2\">Successful transfers</h2>\n            <div className=\"mb2\">{appointmentsSuccess.length} transfers successful.</div>\n            <Cards items={ appointmentsSuccess } icon={ true } />\n        </div>\n    );\n};\n","import { api, domainOptions } from '../config/features';\nimport { commonHeaders, domain } from './common';\nimport { buildRequest } from './jwt';\nimport { gpconnectTransformer } from './transformers/gpconnect';\nimport { migratorTransformer } from './transformers/migrator';\nimport { mockFindAppointments } from './mock/appointments';\nimport { superfetch } from './superfetch';\n\nexport const findAppointments = async () => {\n    const map = {\n        [domainOptions.gpconnect]: findAppointmentsGPConnect,\n        [domainOptions.none]: findAppointmentsMigrator\n    };\n    return await map[api()]();\n};\n\nexport const findAppointmentsGPConnect = async () => {\n    const interactionId = 'urn:nhs:names:services:gpconnect:fhir:rest:search:patient_appointments-1';\n\n    const headers = {\n        ...commonHeaders,\n        'Ssp-InteractionID': interactionId,\n        'Authorization': `Bearer ${buildRequest()}`\n    };\n\n    const start = '2020-02-12';\n    const end = '2020-02-22';\n\n    const url = `${domain}/Patient/2/Appointment?start=ge${start}&start=le${end}`;\n\n    const response = await superfetch({ url, headers, method: 'GET' });\n    return gpconnectTransformer(response);\n};\n\nexport const findAppointmentsMigrator = () => {\n    return migratorTransformer(mockFindAppointments);\n};","import React, { useEffect, useState } from 'react';\nimport Cards from '../components/cards';\nimport { findAppointments } from '../services/find-appointments';\nimport { Link } from 'react-router-dom';\nimport { publicPath } from '../config/env';\n\nexport default () => {\n    const [appointments, setAppointments] = useState([]);\n\n    const getSlotService = async () => {\n        const response = await findAppointments();\n        setAppointments(response);\n    };\n\n    useEffect(() => {\n        getSlotService();\n    }, []);\n\n    return (\n        <div className=\"mb4\">\n            <p className=\"mb2\">Found {appointments.length} appointments in current solution between <b>today</b> and <b>13/04/2020</b>.\n            </p>\n            <Link className=\"nhsuk-link-override\" to={`/${publicPath}/booked`}>\n                <button className=\"nhsuk-button\">\n                    Transfer all appointments\n            </button>\n            </Link>\n            <Cards items={appointments} />\n        </div>\n    );\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport BookAppointments from './book-appointments';\nimport FindAppointments from './find-appointments';\nimport { publicPath } from '../config/env';\n\nexport default () => {\n    return <Switch>\n        <Route exact path={`/${publicPath}`}>\n            <FindAppointments />\n        </Route>\n        <Route path={`/${publicPath}/booked`}>\n            <BookAppointments />\n        </Route>\n    </Switch>;\n};","import React, { Fragment } from 'react';\nimport Header from '../components/header/Header';\nimport styles from './App.module.scss';\nimport { parse } from 'query-string';\nimport Content from './content';\nimport { setFeatures } from '../config/features';\n\nconst App = () => {\n  setFeatures(parse(window.location.search, { parseBooleans: true }))\n\n  return (\n    <Fragment>\n      <Header />\n      <div className={styles.content}>\n        <Content />\n      </div>\n    </Fragment>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './views/App';\nimport * as serviceWorker from './config/serviceWorker';\nimport './index.scss';\nimport 'basscss/css/basscss.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}